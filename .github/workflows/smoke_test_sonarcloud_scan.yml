#
# Copyright 2019-2021 VMware, Inc.
# SPDX-License-Identifier: Apache-2.0
#

name: data-annotator

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest # runs a test on Ubuntu

    steps:
      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Setup Python3
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - run: pip3 install requests

      - name: Install Dependency    
        run: |
          npm install npm
          npm install tslint
          npm install typescript
          tsc -v

      - name: Checkout 
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Checkout devops branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: 'devops'
          path: 'devops'

      #copy needed files and folders from DevOps branch 
      - run: |
          pwd
          ls -l
          cp -rf devops/annotation-service/* ./annotation-service
          cp -rf devops/annotation-app/* ./annotation-app
          cp -rf devops/active-learning-service/* ./active-learning-service
          cp -rf devops/docker-compose.yml .
       
      - name: Bring up Docker 
#        working-directory: ./F-DecoupleAws
        run: |
          str=$(printf '=%.0s' {1..50})
          echo $str Docker Start $str
          chmod +x annotation-app/docker-entrypoint.sh
          docker-compose up -d
          docker-compose ps
          sleep 5
          echo $str Docker Done $str     

      # - name: Annotation App 
      #   working-directory: ./annotation-app
      #   run: |
      #     CI=false npm install
      #     CI=false npm run build --if-present

      # - name: Test Connection
      #   run: |
      #     ls
      #     echo Curl register
      #     curl -X PUT -H "Content-Type: application/json" -d '{"email":"joeq@vmware.com","password":"password","uname":"Joe K Qiao"}' http://localhost:3000/api/v1.0/register
      #     echo Curl End register
      #     echo Curl Start login
      #     curl -X POST -H "Content-Type: application/json" -d '{"email":"joeq@vmware.com","password":"password"}' http://localhost:3000/api/v1.0/login
      #     echo Curl End login

      - name: Checkout e2e-test branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: 'e2e-test'
          path: 'e2e-test'


      - name: Run Smoke Test
        working-directory: ./e2e-test
        run: |
          echo $str Smoke Test Start $str 
          npm install
          npm run webdriver
          npm run e2e-smoke
          sed -i 's/dist\/root\///g' coverage-output/lcov.info
          echo $str Smoke Test End $str 

      - name: keep the coverage report  from test job to subsequent scan jobs
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: ./e2e-test/coverage-output/lcov.info
          retention-days: 1

      - name: keep the devops branch folder from test job to subsequent scan jobs
        uses: actions/upload-artifact@v2
        with:
          name: devops
          path: devops
          retention-days: 1
      
  scan_annotation_app:
    runs-on: ubuntu-latest 
    needs: test

    #define variables to be used for SonarCloud scan
    env:
      SONAR_ORG: lyeohvm
      BRANCH: master

    steps:
      - name: Checkout 
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Checkout devops branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: 'devops'
          path: 'devops'

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

      - name: SonarCloud setup for annotation-app
        working-directory: ./devops/sonar
        run: python ./config_sonar_project.py -ProjectName ${{ env.SONAR_ORG }}-DAML-${{ env.BRANCH }}-annotation-app -ProjectKey ${{ env.SONAR_ORG }}-DAML-${{ env.BRANCH }}-annotation-app -OrgKey ${{ env.SONAR_ORG }} -QualityGateName angular-client-gate -QualityGateConditions ./quality_gates/angular-client.json -SonarToken ${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Scan annotation-app
        uses: sonarsource/sonarcloud-github-action@master  
        with:
          projectBaseDir: ./annotation-app
          args: >
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.projectKey=${{ env.SONAR_ORG }}-DAML-${{ env.BRANCH }}-annotation-app
            -Dsonar.typescript.lcov.reportPaths="./e2e-test/coverage-output/lcov.info" 
            -Dsonar.test.exclusions=**/node_modules/**/*,**/models/**/*,**/downloadProject/**/*,**/logs/**/*,**/venv/**/*,**/__pycache__/**/*,*.md,*.txt,*.yml 
            -Dsonar.verbose=true 
            -Dsonar.c.file.suffixes=- 
            -Dsonar.cpp.file.suffixes=- 
            -Dsonar.objc.file.suffixes=-
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.DATA_GITHUB_TOKEN }}

  scan_annotation_service:
    runs-on: ubuntu-latest 
    needs: test

    #define variables to be used for SonarCloud scan
    env:
      SONAR_ORG: lyeohvm
      BRANCH: master

    steps:
      - name: Checkout 
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Checkout devops branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: 'devops'
          path: 'devops'

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

      - name: SonarCloud setup for annotation-service
        working-directory: ./devops/sonar
        run: python ./config_sonar_project.py -ProjectName ${{ env.SONAR_ORG }}-DAML-${{ env.BRANCH }}-annotation-service -ProjectKey ${{ env.SONAR_ORG }}-DAML-${{ env.BRANCH }}-annotation-service -OrgKey ${{ env.SONAR_ORG }} -QualityGateName angular-client-gate -QualityGateConditions ./quality_gates/angular-client.json -SonarToken ${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Scan annotation-service
        uses: sonarsource/sonarcloud-github-action@master  
        with:
          projectBaseDir: ./annotation-service
          args: >
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.projectKey=${{ env.SONAR_ORG }}-DAML-${{ env.BRANCH }}-annotation-service
            -Dsonar.typescript.lcov.reportPaths="./e2e-test/coverage-output/lcov.info" 
            -Dsonar.test.exclusions=**/node_modules/**/*,**/models/**/*,**/downloadProject/**/*,**/logs/**/*,**/venv/**/*,**/__pycache__/**/*,*.md,*.txt,*.yml 
            -Dsonar.verbose=true 
            -Dsonar.c.file.suffixes=- 
            -Dsonar.cpp.file.suffixes=- 
            -Dsonar.objc.file.suffixes=-
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.DATA_GITHUB_TOKEN }}

  scan_active_learning_service:
    runs-on: ubuntu-latest 
    needs: test

    #define variables to be used for SonarCloud scan
    env:
      SONAR_ORG: lyeohvm
      BRANCH: master

    steps:  
      - name: Checkout 
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Checkout devops branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: 'devops'
          path: 'devops'

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

      - name: SonarCloud setup for active-learning-service
        working-directory: ./devops/sonar
        run: python ./config_sonar_project.py -ProjectName ${{ env.SONAR_ORG }}-DAML-${{ env.BRANCH }}-active-learning-service -ProjectKey ${{ env.SONAR_ORG }}-DAML-${{ env.BRANCH }}-active-learning-service -OrgKey ${{ env.SONAR_ORG }} -QualityGateName angular-client-gate -QualityGateConditions ./quality_gates/angular-client.json -SonarToken ${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Scan active-learning-service
        uses: sonarsource/sonarcloud-github-action@master  
        with:
          projectBaseDir: ./active-learning-service
          args: >
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.projectKey=${{ env.SONAR_ORG }}-DAML-${{ env.BRANCH }}-active-learning-service
            -Dsonar.typescript.lcov.reportPaths="./e2e-test/coverage-output/lcov.info" 
            -Dsonar.test.exclusions=**/node_modules/**/*,**/models/**/*,**/downloadProject/**/*,**/logs/**/*,**/venv/**/*,**/__pycache__/**/*,*.md,*.txt,*.yml 
            -Dsonar.verbose=true 
            -Dsonar.c.file.suffixes=- 
            -Dsonar.cpp.file.suffixes=- 
            -Dsonar.objc.file.suffixes=-
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.DATA_GITHUB_TOKEN }}

